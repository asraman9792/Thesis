"""
This module contains vulnerability class and relevant functions.
"""

from Network import *

class vulNode(object):
    """
    Create vulnerability object.
    """
    def __init__(self, name):        
        #Initialize privilege value
        self.privilege = None
        #Initialize value for input of the HARM
        self.val = 0
        #Initialize name
        self.name = name
        self.con = []
        #Initialize metric values
        self.pro = 0
        self.impact = 0
        self.cost = 0
        self.risk = 0
        self.return_on_attack = 0


    def __str__(self):
        return self.name

    def createVuls(self, node, metricValue, pri):
        """
        Create vulnerability network for the node.
        :param node: node in the network which has vulnerabilities
        :param metricValue: assign a metric value to vulnerability (e.g. attack probability)
        :param pri: assign privilege value to vulnerability (1: user; 2: admin; 3: root)
        :returns: none
        """
        
        #Instantiate vulnerability parameters
        self.val = metricValue
        self.privilege = pri
        
        #Create a vulnerability network for the node
        if node.vul is None:
            node.vul = network()
            
        #Add vulnerability into the vulnerability network of node
        node.vul.nodes.append(self)
        
        return None
    
    def thresholdPri(self, node, t):
        """
        Set start point for the vulnerability network and link vulnerabilities to the start point.
        
        :param node: node in the network which has vulnerabilities
        :param t: privilege value for the start point
        :returns None
        """
        
        node.vul.s = vulNode('s')
        s = node.vul.s    
        del s.con[:]
        for v in node.vul.nodes:
            if v.privilege <= t:
                s.con.append(v)        
        return None
    
    def terminalPri(self, node, t):
        """
        Set end point for the vulnerability network and link vulnerabilities to the end point.
        
        :param node: node in the network which has vulnerabilities
        :param t: privilege value for the end point
        :returns None
        """
        
        node.vul.e = vulNode('e')
        e = node.vul.e
        del e.con[:]
        for v in node.vul.nodes:
            if v.privilege >= t:
                v.con.append(e)
        return None

    def assignRisk(self, pro, ai):
        '''
        Risk = Probability * Impact
        '''
        self.pro = pro
        self.impact = ai
        self.risk = self.pro * self.impact
        self.val = self.risk
        return None
    
    def assignReturnOnAttack(self, pro, ai, cost):
        '''
        Return on Attack Path = Probability * Impact / Cost
        '''
        self.pro = pro
        self.impact = ai
        self.cost = cost
        self.return_on_attack = float(self.pro * self.impact / self.cost)
        self.val = self.return_on_attack
        return None

    
    
    